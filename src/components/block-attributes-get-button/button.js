/**
 * External dependencies
 */
import { startCase } from 'lodash'
import { applyBlockDesign } from '~stackable/util'

/**
 * WordPress dependencies
 */
import { useState } from '@wordpress/element'
import { useSelect } from '@wordpress/data'
import { PluginBlockSettingsMenuItem } from '@wordpress/edit-post'
import { Modal } from '@wordpress/components'
import { applyFilters } from '@wordpress/hooks'

const GetBlockAttributesButton = ( {
	clientId,
} ) => {
	const [ openPopover, setOpenPopover ] = useState( false )
	const [ changed, setChanged ] = useState( false )

	const {
		blockName,
		getJSONBlockAttributes,
	} = useSelect( select => {
		const { getBlockName } = select( 'core/block-editor' )

		return {
			blockName: clientId && getBlockName( clientId ) ? getBlockName( clientId ).replace( /^\w+\//g, '' ) : '',
			getJSONBlockAttributes: () => {
				const { getBlockName } = select( 'core/block-editor' )
				const { getBlockType } = select( 'core/blocks' )

				if ( ! clientId ) {
					return {}
				}

				const blockAttributes = select( 'core/block-editor' ).getBlockAttributes( clientId )
				const blockName = getBlockName( clientId ).replace( /^\w+\//g, '' )

				// Remove attributes which remain as the default.
				const defaultAttributes = getBlockType( getBlockName( clientId ) ).attributes
				const cleanedAttributes = Object.keys( blockAttributes ).reduce( ( attrs, attrName ) => {
					if ( blockAttributes[ attrName ] !== ( defaultAttributes[ attrName ] ? defaultAttributes[ attrName ].default : '' ) ) {
						attrs[ attrName ] = blockAttributes[ attrName ]
					}
					return attrs
				}, {} )

				// Remove the unique class. Since this is generated by the block.
				cleanedAttributes.uniqueClass = undefined

				// The filter should omit attributes which should not be overridden. For example, text titles.
				return JSON.stringify( applyFilters( `stackable.${ blockName }.design.filtered-block-attributes`, cleanedAttributes ), null, 4 )
			},
		}
	} )

	const setJSONBlockAttributes = jsonString => {
		if ( ! clientId ) {
			return
		}
		try {
			const attributes = JSON.parse( jsonString )
			applyBlockDesign( attributes, clientId )
		} catch ( err ) {
			console.error( err ) // eslint-disable-line no-console
		}
	}

	return (
		<>
			<PluginBlockSettingsMenuItem
				icon="editor-code"
				label="Get / Set Block Attributes"
				onClick={ () => {
					setOpenPopover( true )
					setChanged( false )
					setTimeout( () => document.querySelector( '.ugb-modal-get-block-attributes-button textarea' ).select(), 100 )
				} }
			/>
			{ openPopover &&
				<Modal
					title={ `${ startCase( blockName ) } Block Attributes` }
					focusOnMount={ true }
					className="ugb-modal-get-block-attributes-button"
					onRequestClose={ () => {
						if ( changed ) {
							const value = document.querySelector( '.ugb-modal-get-block-attributes-button textarea' ).value
							setJSONBlockAttributes( value )
						}

						setOpenPopover( false )
					 } }
				>
					<p>{ 'Copy or modify the attributes of the block directly. Use only double quotes "' }</p>
					<textarea onChange={ () => setChanged( true ) }>{ getJSONBlockAttributes() }</textarea>
				</Modal>
			}
		</>
	)
}

export default GetBlockAttributesButton
