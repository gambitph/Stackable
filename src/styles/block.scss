/**
 * Core Block Styles
 */
@import "breakpoints";
@import "block-transitions";

// We need to set this to relative for making the whole block clickable.
.stk-block {
	position: relative;
	width: 100%;
}
.stk-block,
.entry-content .stk-block {
	margin-top: 0;
}

// Containers
.stk-column,
.stk-block.stk-column {
	margin-top: 0;
	margin-bottom: 0;
	// We need to add at least 1px here so that when the column collapses
	// automatically, it still shows up in tablet and moblie.
	min-width: 1px;
}
// Mostly for border radius.
.stk-container {
	overflow: hidden;
}

/**
 * Resizeable rows and columns
 */
.stk-row {
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
}
.stk-column {
	flex: 1 1 0; // flex-basis 0 means that all columns will be equal.
	box-sizing: border-box;

	// Don't center the columns.
	margin-left: 0;
	margin-right: 0;

	// Make sure the contents occupy the entire area.
	display: flex;
	align-items: stretch;
}

// Column widths.
@include desktop-tablet {
	@for $i from 2 through 10 {
		.stk-row.stk-columns-#{ $i } {
			> .stk-column {
				flex: 1 1 #{ 100% / $i };
				max-width: #{ 100% / $i };
			}
		}
	}
}

// Columns can be collapsed for tablet and mobile only.
@include desktop {
	.stk-row {
		flex-wrap: nowrap;
	}
}
// Mobile auto-collapses all columns.
@include mobile {
	.stk-column {
		flex: 1 1 100%;
		max-width: 100%;
	}
}

// Block inner blocks.
.stk-block-content {
	width: 100%;
	position: relative;
	&:not(.stk-row) {
		// Make sure the inner blocks are top aligned.
		display: flex;
		flex-direction: column;
		justify-content: flex-start;
	}
}
.stk-inner-blocks {
	flex: 1;
	&:not(.stk-row) {
		// Make sure the inner blocks are top aligned.
		display: flex;
		flex-direction: column;
		justify-content: flex-start;

		// Inner block orientation.
		&:not(.stk--block-orientation-horizontal) {
			flex-direction: column;
		}
		&.stk--block-orientation-horizontal {
			flex-direction: row;
			> * {
				margin-top: 0;
				margin-bottom: 0;
			}
		}
	}

	// Ensure the contents don't have extra margins.
	> *:first-child {
		margin-top: 0;
	}
	> *:last-child {
		margin-bottom: 0;
	}
}
// Column with a block background has a padding that might not be obvious.
.stk-block-background {
	&.stk-column > .stk-block-content {
		margin: 0;
	}
}

// Images
.stk-image--fit {
	object-fit: cover;
	height: 100% !important;
	width: 100% !important;
}

// Block float alignment.
:is(.stk-block.alignleft, .stk-block.alignright) {
	.stk-inner-blocks:first-of-type > .stk-block {
		max-width: 350px; // Give a default width for a floated block.
		width: auto;
	}
}

// Responsive hiding.
@include desktop {
	.stk--hide-desktop {
		display: none !important;
	}
}
@include tablet {
	.stk--hide-tablet {
		display: none !important;
	}
}
@include mobile {
	.stk--hide-mobile {
		display: none !important;
	}
}

// Headings and Text.
// This removes the normal margins of headings and paragraphs, so we can add our own.
.stk-block {
	.stk-block-heading__text,
	.stk-block-text__text {
		margin-bottom: 0;
	}
}
.stk-block-heading,
.stk-block-text,
.stk-block .stk-block-text__text {
	margin-top: 0;
}
// Headings have a large margin top except when they're the first entry.
:where(.stk-block-heading:not(:first-child)) .stk-block-heading__text {
	margin-top: 1.5em;
}
// No margin top when the first child but only in the frontend.
.stk-block-heading:first-child .stk-block-heading__text:not([contenteditable]) {
	margin-top: 0;
}
// Remove any decorative things added by themes.
.stk-block-text__text,
.stk-block-heading__text {
	&::after,
	&::before {
		content: unset;
	}
}

// Typography Classes.
.stk--is-gradient {
	&,
	li {
		background-clip: text;
		-webkit-background-clip: text;
		-moz-background-clip: text;
		-o-background-clip: text;
		-webkit-text-fill-color: transparent;
		-moz-text-fill-color: transparent;
		-o-text-fill-color: transparent;
	}
}

// Buttons.
.stk-block {
	.stk-button {
		justify-content: center;
		position: relative;
		display: flex;
		align-items: center;
		column-gap: 4px;
		text-decoration: none;
		// make sure that the anchor tag's width matches the parent's width.
		width: 100%;

		&::before,
		&::after {
			content: "";
			position: absolute;
			top: 0;
			left: 0;
			pointer-events: none;
			border-radius: inherit;
		}

		&::before {
			bottom: 0;
			right: 0;
			// Borders should be on top of the ::after pseudoelement.
			z-index: 2;
		}

		&::after {
			width: 100%;
			height: 100%;
			opacity: 0;
			z-index: 1;
		}

		.stk--inner-svg {
			display: flex;
			svg:last-child {
				height: 1em;
				width: 1em;
				&,
				is(g, path, rect, polygon, ellipse) {
					fill: #fff;
				}
			}
		}

		> * {
			z-index: 2;
		}
	}
}

.stk-block {
	&.is-style-pill {
		a.stk-button {
			width: 64px;
		}
	}
}

// Text alignment should also work for flex blocks like the icon block.
.stk-block.has-text-align-right {
	justify-content: flex-end;
}

// Default text direction, we need to add this for RTL support.
:where(.stk-block) {
	text-align: start;
}

// Text alignment should also work for flex blocks like the icon block.
.has-text-align-center .stk-block,
.has-text-align-center:where(.stk-block) {
	justify-content: center;
	text-align: center;
}
.has-text-align-right .stk-block,
.has-text-align-right:where(.stk-block) {
	justify-content: flex-end;
	text-align: end;
}
.has-text-align-left .stk-block,
.has-text-align-left:where(.stk-block) {
	justify-content: flex-start;
	text-align: start;
}
