
@import "common";
@import "./style";

// Required styles for non-plain columns so we can set their locations.
.ugb-columns:not(.ugb-columns--design-plain) {
	> .ugb-inner-block > .ugb-block-content > .ugb-columns__item > .block-editor-inner-blocks > .block-editor-block-list__layout {
		> *:nth-child(1) {
			grid-area: one;
		}
		> *:nth-child(2) {
			grid-area: two;
		}
		> *:nth-child(3) {
			grid-area: three;
		}
		> *:nth-child(4) {
			grid-area: four;
		}
		> *:nth-child(5) {
			grid-area: five;
		}
		> *:nth-child(6) {
			grid-area: six;
		}
		> *:nth-child(7) {
			grid-area: seven;
		}
		> *:nth-child(8) {
			grid-area: eight;
		}
	}

	&:not(.ugb-columns--design-plain) {
		> .ugb-inner-block > .ugb-block-content > .ugb-columns__item > .block-editor-inner-blocks > .block-editor-block-list__layout {
			grid-auto-columns: auto;
			grid-auto-flow: row;
		}
	}
}

.ugb-columns {
	> .ugb-inner-block > .ugb-block-content > .ugb-columns__item {
		display: flex !important;
		justify-content: stretch;
		align-items: stretch;
		height: 100%;
		> .block-editor-inner-blocks > .block-editor-block-list__layout {
			height: 100%;
		}
	}
}
.ugb-columns__item > .block-editor-inner-blocks {
	width: 100%;
}


.ugb-columns {
	> .ugb-inner-block > .ugb-block-content > .ugb-columns__item > .block-editor-inner-blocks > .block-editor-block-list__layout {
		@include columns-grid();
	}
	// .block-editor-block-list__layout {
	// 	margin-left: 0;
	// 	margin-right: 0;
	// }

	/**
	 * Grid design.
	 */
	&.ugb-columns--design-grid {
		@for $i from 2 through 8 {
			&.ugb-columns--columns-#{ $i } {
				> .ugb-inner-block > .ugb-block-content > .ugb-columns__item > .block-editor-inner-blocks > .block-editor-block-list__layout {
					@include columns-grid-grid( $i );
				}
			}
		}
	}

	> .ugb-inner-block > .ugb-block-content > .ugb-columns__item > .block-editor-inner-blocks > .block-editor-block-list__layout > .block-editor-block-list__block {
		display: flex;
		flex-direction: column;
	}
}

// Display the borders of columns of other columns when a column is selected.
[data-type="ugb/columns"].has-child-selected {
	[data-type="ugb/column"]:not(.has-child-selected)::before {
		border: 1px dashed rgba(123, 134, 162, 0.3);
	}
}
// Display the borders of columns if the columns block is selected.
[data-type="ugb/columns"].is-selected {
	[data-type="ugb/column"]:not(.has-child-selected)::before {
		border: 1px dashed rgba(123, 134, 162, 0.3);
	}
}

// Adjust the selection outline of columns, by default they're too tall and can
// overlap against other columns.
[data-type="ugb/column"]::before {
	top: 0 !important;
	bottom: 0 !important;
	left: 0 !important;
	right: 0 !important;
}
// Since we adjusted the size of outlines, the toolbars would appear past the
// outline. Re-attach the toolbar to the outline.
@media (min-width: 600px) {
	[data-type="ugb/column"].block-editor-block-contextual-toolbar {
		margin-bottom: 0 !important;
		margin-left: 0 !important;
	}
}

// Add some borders to our columns block so people know that they're clickable.
[data-type="ugb/columns"]:not(.is-selected)::before {
	border: 1px dashed rgba(243, 73, 87, 0.6) !important;
}

/**
 * Rearranging columns.
 */
// Smoothly animate lifting of columns when mousing over rearranging.
[data-type="ugb/column"] {
	transition: all 0.3s ease-in-out !important;
}
// Set to no transition to let the sorter do its own animation.
[data-type="ugb/column"][style*="transform: tra"] {
	transition: none !important;
}
// Lift the column for rearranging visual feedback.
@for $i from 1 through 8 {
	.ugb-columns--highlight-#{ $i } > .ugb-inner-block > .ugb-block-content > .ugb-columns__item > .block-editor-inner-blocks > .block-editor-block-list__layout > [data-type="ugb/column"]:nth-child(#{ $i }) {
		transform: translateY(-20px) !important;
	}
}
