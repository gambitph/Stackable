export const addBorderStyles = ( blockStyleGenerator, props = {} ) => {
	const propsToPass = {
		...props,
		version: props.version,
		versionAdded: '3.0.0',
		versionDeprecated: '',
	}
	const {
		addBorderRadiusOverflow = true,
		selector = '',
		attrNameTemplate = '%s',
		hoverSelector,
		borderRadiusSelector,
		borderEnabledCallback = getAttribute => getAttribute( 'borderType' ),
	} = props

	// The style below is deprecated. We have to keep it because users who have
	// updated will suddenly see that they have lost their border radius
	blockStyleGenerator.addBlockStyles( 'borderRadius', [ {
		...propsToPass,
		selector: borderRadiusSelector || selector,
		styleRule: 'borderRadius',
		attrName: 'borderRadius',
		key: 'borderRadius',
		attrNameTemplate,
		format: '%spx',
		responsive: 'all',
		hover: 'all',
		hoverSelector: borderRadiusSelector ? undefined : hoverSelector,
	} ] )

	blockStyleGenerator.addBlockStyles( 'borderRadius2', [ {
		...propsToPass,
		selector: borderRadiusSelector || selector,
		styleRule: 'borderTopLeftRadius',
		attrName: 'borderRadius2',
		key: 'borderTopLeftRadius2',
		attrNameTemplate,
		format: '%spx',
		responsive: 'all',
		hover: 'all',
		valuePreCallback: value => value?.top,
		hoverSelector: borderRadiusSelector ? undefined : hoverSelector,
	}, {
		...propsToPass,
		selector: borderRadiusSelector || selector,
		styleRule: 'borderTopRightRadius',
		attrName: 'borderRadius2',
		key: 'borderTopRightRadius2',
		attrNameTemplate,
		format: '%spx',
		responsive: 'all',
		hover: 'all',
		valuePreCallback: value => value?.right,
		hoverSelector: borderRadiusSelector ? undefined : hoverSelector,
	}, {
		...propsToPass,
		selector: borderRadiusSelector || selector,
		styleRule: 'borderBottomRightRadius',
		attrName: 'borderRadius2',
		key: 'borderBottomRightRadius2',
		attrNameTemplate,
		format: '%spx',
		responsive: 'all',
		hover: 'all',
		valuePreCallback: value => value?.left,
		hoverSelector: borderRadiusSelector ? undefined : hoverSelector,
	}, {
		...propsToPass,
		selector: borderRadiusSelector || selector,
		styleRule: 'borderBottomLeftRadius',
		attrName: 'borderRadius2',
		key: 'borderBottomLeftRadius2',
		attrNameTemplate,
		format: '%spx',
		responsive: 'all',
		hover: 'all',
		valuePreCallback: value => value?.bottom,
		hoverSelector: borderRadiusSelector ? undefined : hoverSelector,
	} ] )

	// Adding a border radius should append `overflow: hidden`.  This is to
	// prevent gradient background from overflowing.  borderRadius is
	// deprecated, see comment below.
	blockStyleGenerator.addBlockStyles( 'borderRadius', [ {
		...propsToPass,
		selector: borderRadiusSelector || selector,
		styleRule: 'overflow',
		attrName: 'borderRadius',
		key: 'borderRadius-overflow',
		attrNameTemplate,
		responsive: 'all',
		hover: 'all',
		hoverSelector: borderRadiusSelector ? undefined : hoverSelector,
		enabledCallback: ( _getAttribute, attributes ) => {
			if ( addBorderRadiusOverflow && attrNameTemplate === 'block%s' && attributes.overflow ) {
				return false
			}
			return addBorderRadiusOverflow
		},
		valueCallback: () => 'hidden',
		dependencies: [ 'overflow' ],
	} ] )

	// borderRadius is deprecated, so we had to duplicate the style generated by
	// the borderRadius to be used by borderRadius2.  Adding a border radius
	// should append `overflow: hidden`.  This is to prevent gradient background
	// from overflowing.
	blockStyleGenerator.addBlockStyles( 'borderRadius2', [ {
		...propsToPass,
		selector: borderRadiusSelector || selector,
		styleRule: 'overflow',
		attrName: 'borderRadius2',
		key: 'borderRadius2-overflow',
		attrNameTemplate,
		responsive: 'all',
		hover: 'all',
		hoverSelector: borderRadiusSelector ? undefined : hoverSelector,
		enabledCallback: ( _getAttribute, attributes ) => {
			if ( addBorderRadiusOverflow && attrNameTemplate === 'block%s' && attributes.overflow ) {
				return false
			}
			return addBorderRadiusOverflow
		},
		valueCallback: () => 'hidden',
		dependencies: [ 'overflow' ],
	} ] )

	blockStyleGenerator.addBlockStyles( 'shadow', [ {
		...propsToPass,
		selector,
		styleRule: 'boxShadow',
		attrName: 'shadow',
		key: 'shadow',
		attrNameTemplate,
		hover: 'all',
		hoverSelector,
	} ] )

	blockStyleGenerator.addBlockStyles( 'borderType', [ {
		...propsToPass,
		selector,
		styleRule: 'borderStyle',
		attrName: 'borderType',
		key: 'borderType',
		attrNameTemplate,
	} ] )

	blockStyleGenerator.addBlockStyles( 'borderColor', [ {
		...propsToPass,
		selector,
		styleRule: 'borderColor',
		attrName: 'borderColor',
		key: 'borderColor',
		attrNameTemplate,
		enabledCallback: borderEnabledCallback,
		hover: 'all',
		hoverSelector,
		dependencies: [ 'borderType' ],
	} ] )

	blockStyleGenerator.addBlockStyles( 'borderWidth', [ {
		...propsToPass,
		selector,
		styleRule: 'borderTopWidth',
		attrName: 'borderWidth',
		key: 'borderWidth-top',
		attrNameTemplate,
		responsive: 'all',
		hover: 'all',
		hoverSelector,
		format: '%spx',
		enabledCallback: borderEnabledCallback,
		valuePreCallback: value => value?.top,
		dependencies: [ 'borderType' ],
	}, {
		...propsToPass,
		selector,
		styleRule: 'borderRightWidth',
		attrName: 'borderWidth',
		key: 'borderWidth-right',
		attrNameTemplate,
		responsive: 'all',
		hover: 'all',
		hoverSelector,
		format: '%spx',
		enabledCallback: borderEnabledCallback,
		valuePreCallback: value => value?.right,
		dependencies: [ 'borderType' ],
	}, {
		...propsToPass,
		selector,
		styleRule: 'borderBottomWidth',
		attrName: 'borderWidth',
		key: 'borderWidth-bottom',
		attrNameTemplate,
		responsive: 'all',
		hover: 'all',
		hoverSelector,
		format: '%spx',
		enabledCallback: borderEnabledCallback,
		valuePreCallback: value => value?.bottom,
		dependencies: [ 'borderType' ],
	}, {
		...propsToPass,
		selector,
		styleRule: 'borderLeftWidth',
		attrName: 'borderWidth',
		key: 'borderWidth-left',
		attrNameTemplate,
		responsive: 'all',
		hover: 'all',
		hoverSelector,
		format: '%spx',
		enabledCallback: borderEnabledCallback,
		valuePreCallback: value => value?.left,
		dependencies: [ 'borderType' ],
	} ] )
}
