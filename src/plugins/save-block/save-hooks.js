/**
 * External dependencies
 */
import { cloneDeep } from 'lodash'

/**
 * WordPress dependencies
 */
import { useSelect } from '@wordpress/data'
import { serialize } from '@wordpress/blocks'
import { applyFilters } from '@wordpress/hooks'

export const saveBlockStyleFuncs = select => {
	return {
		getBlockTitle: clientId => {
			const { getBlockName } = select( 'core/block-editor' )
			const { getBlockType } = select( 'core/blocks' )
			const blockName = getBlockName( clientId )
			return getBlockType( blockName )?.title || ''
		},
		getBlockSave: clientId => {
			const { getBlock } = select( 'core/block-editor' )
			return clientId ? serialize( getBlock( clientId ) ) : ''
		},
		getBlockAttributes: clientId => {
			if ( ! clientId ) {
				return {}
			}

			const { getBlockName } = select( 'core/block-editor' )
			const blockAttributes = cloneDeep( select( 'core/block-editor' ).getBlockAttributes( clientId ) )
			const blockName = getBlockName( clientId ).replace( /^\w+\//g, '' )

			// Remove the unique class. Since this is generated by the block.
			blockAttributes.uniqueId = undefined

			// The filter should omit attributes which should not be overridden. For example, text titles.
			return applyFilters( `stackable.${ blockName }.design.filtered-block-attributes`, blockAttributes )
		},
		getBlockInnerBlocks: clientId => {
			// Only do this if only 1 block is selected.
			if ( ! clientId ) {
				return []
			}

			const { getBlock } = select( 'core/block-editor' )
			const getBlockTemplate = block => {
				return [
					block.name,
					cloneDeep( block.attributes ),
					block.innerBlocks.map( getBlockTemplate ),
				]
			}

			const innerBlocks = getBlock( clientId ).innerBlocks || []
			return innerBlocks.map( getBlockTemplate )
		},
	}
}

export const useSaveBlockStyle = () => {
	return useSelect( saveBlockStyleFuncs )
}
